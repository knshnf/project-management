schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """refresh the cache entry"""
  refresh: Boolean! = false

  """measured in seconds"""
  ttl: Int! = 60
) on QUERY

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
columns and relationships of "comments"
"""
type comments {
  comment: String!
  created_at: timestamptz!
  id: bigint!
  name: String

  """An object relationship"""
  task: task!
  task_id: Int!
  updated_at: timestamptz!

  """An object relationship"""
  user: users!
  user_id: Int!
}

"""
aggregated selection of "comments"
"""
type comments_aggregate {
  aggregate: comments_aggregate_fields
  nodes: [comments!]!
}

"""
aggregate fields of "comments"
"""
type comments_aggregate_fields {
  avg: comments_avg_fields
  count(columns: [comments_select_column!], distinct: Boolean): Int!
  max: comments_max_fields
  min: comments_min_fields
  stddev: comments_stddev_fields
  stddev_pop: comments_stddev_pop_fields
  stddev_samp: comments_stddev_samp_fields
  sum: comments_sum_fields
  var_pop: comments_var_pop_fields
  var_samp: comments_var_samp_fields
  variance: comments_variance_fields
}

"""
order by aggregate values of table "comments"
"""
input comments_aggregate_order_by {
  avg: comments_avg_order_by
  count: order_by
  max: comments_max_order_by
  min: comments_min_order_by
  stddev: comments_stddev_order_by
  stddev_pop: comments_stddev_pop_order_by
  stddev_samp: comments_stddev_samp_order_by
  sum: comments_sum_order_by
  var_pop: comments_var_pop_order_by
  var_samp: comments_var_samp_order_by
  variance: comments_variance_order_by
}

"""
input type for inserting array relation for remote table "comments"
"""
input comments_arr_rel_insert_input {
  data: [comments_insert_input!]!

  """on conflict condition"""
  on_conflict: comments_on_conflict
}

"""aggregate avg on columns"""
type comments_avg_fields {
  id: Float
  task_id: Float
  user_id: Float
}

"""
order by avg() on columns of table "comments"
"""
input comments_avg_order_by {
  id: order_by
  task_id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "comments". All fields are combined with a logical 'AND'.
"""
input comments_bool_exp {
  _and: [comments_bool_exp!]
  _not: comments_bool_exp
  _or: [comments_bool_exp!]
  comment: String_comparison_exp
  created_at: timestamptz_comparison_exp
  id: bigint_comparison_exp
  name: String_comparison_exp
  task: task_bool_exp
  task_id: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: users_bool_exp
  user_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "comments"
"""
enum comments_constraint {
  """unique or primary key constraint"""
  comments_id_key

  """unique or primary key constraint"""
  comments_pkey
}

"""
input type for incrementing numeric columns in table "comments"
"""
input comments_inc_input {
  id: bigint
  task_id: Int
  user_id: Int
}

"""
input type for inserting data into table "comments"
"""
input comments_insert_input {
  comment: String
  created_at: timestamptz
  id: bigint
  name: String
  task: task_obj_rel_insert_input
  task_id: Int
  updated_at: timestamptz
  user: users_obj_rel_insert_input
  user_id: Int
}

"""aggregate max on columns"""
type comments_max_fields {
  comment: String
  created_at: timestamptz
  id: bigint
  name: String
  task_id: Int
  updated_at: timestamptz
  user_id: Int
}

"""
order by max() on columns of table "comments"
"""
input comments_max_order_by {
  comment: order_by
  created_at: order_by
  id: order_by
  name: order_by
  task_id: order_by
  updated_at: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type comments_min_fields {
  comment: String
  created_at: timestamptz
  id: bigint
  name: String
  task_id: Int
  updated_at: timestamptz
  user_id: Int
}

"""
order by min() on columns of table "comments"
"""
input comments_min_order_by {
  comment: order_by
  created_at: order_by
  id: order_by
  name: order_by
  task_id: order_by
  updated_at: order_by
  user_id: order_by
}

"""
response of any mutation on the table "comments"
"""
type comments_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [comments!]!
}

"""
on conflict condition type for table "comments"
"""
input comments_on_conflict {
  constraint: comments_constraint!
  update_columns: [comments_update_column!]! = []
  where: comments_bool_exp
}

"""Ordering options when selecting data from "comments"."""
input comments_order_by {
  comment: order_by
  created_at: order_by
  id: order_by
  name: order_by
  task: task_order_by
  task_id: order_by
  updated_at: order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: comments"""
input comments_pk_columns_input {
  id: bigint!
}

"""
select columns of table "comments"
"""
enum comments_select_column {
  """column name"""
  comment

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  task_id

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
input type for updating data in table "comments"
"""
input comments_set_input {
  comment: String
  created_at: timestamptz
  id: bigint
  name: String
  task_id: Int
  updated_at: timestamptz
  user_id: Int
}

"""aggregate stddev on columns"""
type comments_stddev_fields {
  id: Float
  task_id: Float
  user_id: Float
}

"""
order by stddev() on columns of table "comments"
"""
input comments_stddev_order_by {
  id: order_by
  task_id: order_by
  user_id: order_by
}

"""aggregate stddev_pop on columns"""
type comments_stddev_pop_fields {
  id: Float
  task_id: Float
  user_id: Float
}

"""
order by stddev_pop() on columns of table "comments"
"""
input comments_stddev_pop_order_by {
  id: order_by
  task_id: order_by
  user_id: order_by
}

"""aggregate stddev_samp on columns"""
type comments_stddev_samp_fields {
  id: Float
  task_id: Float
  user_id: Float
}

"""
order by stddev_samp() on columns of table "comments"
"""
input comments_stddev_samp_order_by {
  id: order_by
  task_id: order_by
  user_id: order_by
}

"""aggregate sum on columns"""
type comments_sum_fields {
  id: bigint
  task_id: Int
  user_id: Int
}

"""
order by sum() on columns of table "comments"
"""
input comments_sum_order_by {
  id: order_by
  task_id: order_by
  user_id: order_by
}

"""
update columns of table "comments"
"""
enum comments_update_column {
  """column name"""
  comment

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  task_id

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""aggregate var_pop on columns"""
type comments_var_pop_fields {
  id: Float
  task_id: Float
  user_id: Float
}

"""
order by var_pop() on columns of table "comments"
"""
input comments_var_pop_order_by {
  id: order_by
  task_id: order_by
  user_id: order_by
}

"""aggregate var_samp on columns"""
type comments_var_samp_fields {
  id: Float
  task_id: Float
  user_id: Float
}

"""
order by var_samp() on columns of table "comments"
"""
input comments_var_samp_order_by {
  id: order_by
  task_id: order_by
  user_id: order_by
}

"""aggregate variance on columns"""
type comments_variance_fields {
  id: Float
  task_id: Float
  user_id: Float
}

"""
order by variance() on columns of table "comments"
"""
input comments_variance_order_by {
  id: order_by
  task_id: order_by
  user_id: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "comments"
  """
  delete_comments(
    """filter the rows which have to be deleted"""
    where: comments_bool_exp!
  ): comments_mutation_response

  """
  delete single row from the table: "comments"
  """
  delete_comments_by_pk(id: bigint!): comments

  """
  delete data from the table: "projects"
  """
  delete_projects(
    """filter the rows which have to be deleted"""
    where: projects_bool_exp!
  ): projects_mutation_response

  """
  delete single row from the table: "projects"
  """
  delete_projects_by_pk(id: bigint!): projects

  """
  delete data from the table: "status"
  """
  delete_status(
    """filter the rows which have to be deleted"""
    where: status_bool_exp!
  ): status_mutation_response

  """
  delete single row from the table: "status"
  """
  delete_status_by_pk(id: bigint!, name: String!): status

  """
  delete data from the table: "tags"
  """
  delete_tags(
    """filter the rows which have to be deleted"""
    where: tags_bool_exp!
  ): tags_mutation_response

  """
  delete single row from the table: "tags"
  """
  delete_tags_by_pk(id: bigint!): tags

  """
  delete data from the table: "task"
  """
  delete_task(
    """filter the rows which have to be deleted"""
    where: task_bool_exp!
  ): task_mutation_response

  """
  delete single row from the table: "task"
  """
  delete_task_by_pk(id: bigint!): task

  """
  delete data from the table: "task_tags"
  """
  delete_task_tags(
    """filter the rows which have to be deleted"""
    where: task_tags_bool_exp!
  ): task_tags_mutation_response

  """
  delete single row from the table: "task_tags"
  """
  delete_task_tags_by_pk(id: bigint!): task_tags

  """
  delete data from the table: "task_type"
  """
  delete_task_type(
    """filter the rows which have to be deleted"""
    where: task_type_bool_exp!
  ): task_type_mutation_response

  """
  delete single row from the table: "task_type"
  """
  delete_task_type_by_pk(id: bigint!, name: String!): task_type

  """
  delete data from the table: "users"
  """
  delete_users(
    """filter the rows which have to be deleted"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  delete single row from the table: "users"
  """
  delete_users_by_pk(id: bigint!, username: String!): users

  """
  insert data into the table: "comments"
  """
  insert_comments(
    """the rows to be inserted"""
    objects: [comments_insert_input!]!

    """on conflict condition"""
    on_conflict: comments_on_conflict
  ): comments_mutation_response

  """
  insert a single row into the table: "comments"
  """
  insert_comments_one(
    """the row to be inserted"""
    object: comments_insert_input!

    """on conflict condition"""
    on_conflict: comments_on_conflict
  ): comments

  """
  insert data into the table: "projects"
  """
  insert_projects(
    """the rows to be inserted"""
    objects: [projects_insert_input!]!

    """on conflict condition"""
    on_conflict: projects_on_conflict
  ): projects_mutation_response

  """
  insert a single row into the table: "projects"
  """
  insert_projects_one(
    """the row to be inserted"""
    object: projects_insert_input!

    """on conflict condition"""
    on_conflict: projects_on_conflict
  ): projects

  """
  insert data into the table: "status"
  """
  insert_status(
    """the rows to be inserted"""
    objects: [status_insert_input!]!

    """on conflict condition"""
    on_conflict: status_on_conflict
  ): status_mutation_response

  """
  insert a single row into the table: "status"
  """
  insert_status_one(
    """the row to be inserted"""
    object: status_insert_input!

    """on conflict condition"""
    on_conflict: status_on_conflict
  ): status

  """
  insert data into the table: "tags"
  """
  insert_tags(
    """the rows to be inserted"""
    objects: [tags_insert_input!]!

    """on conflict condition"""
    on_conflict: tags_on_conflict
  ): tags_mutation_response

  """
  insert a single row into the table: "tags"
  """
  insert_tags_one(
    """the row to be inserted"""
    object: tags_insert_input!

    """on conflict condition"""
    on_conflict: tags_on_conflict
  ): tags

  """
  insert data into the table: "task"
  """
  insert_task(
    """the rows to be inserted"""
    objects: [task_insert_input!]!

    """on conflict condition"""
    on_conflict: task_on_conflict
  ): task_mutation_response

  """
  insert a single row into the table: "task"
  """
  insert_task_one(
    """the row to be inserted"""
    object: task_insert_input!

    """on conflict condition"""
    on_conflict: task_on_conflict
  ): task

  """
  insert data into the table: "task_tags"
  """
  insert_task_tags(
    """the rows to be inserted"""
    objects: [task_tags_insert_input!]!

    """on conflict condition"""
    on_conflict: task_tags_on_conflict
  ): task_tags_mutation_response

  """
  insert a single row into the table: "task_tags"
  """
  insert_task_tags_one(
    """the row to be inserted"""
    object: task_tags_insert_input!

    """on conflict condition"""
    on_conflict: task_tags_on_conflict
  ): task_tags

  """
  insert data into the table: "task_type"
  """
  insert_task_type(
    """the rows to be inserted"""
    objects: [task_type_insert_input!]!

    """on conflict condition"""
    on_conflict: task_type_on_conflict
  ): task_type_mutation_response

  """
  insert a single row into the table: "task_type"
  """
  insert_task_type_one(
    """the row to be inserted"""
    object: task_type_insert_input!

    """on conflict condition"""
    on_conflict: task_type_on_conflict
  ): task_type

  """
  insert data into the table: "users"
  """
  insert_users(
    """the rows to be inserted"""
    objects: [users_insert_input!]!

    """on conflict condition"""
    on_conflict: users_on_conflict
  ): users_mutation_response

  """
  insert a single row into the table: "users"
  """
  insert_users_one(
    """the row to be inserted"""
    object: users_insert_input!

    """on conflict condition"""
    on_conflict: users_on_conflict
  ): users

  """
  update data of the table: "comments"
  """
  update_comments(
    """increments the numeric columns with given value of the filtered values"""
    _inc: comments_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: comments_set_input

    """filter the rows which have to be updated"""
    where: comments_bool_exp!
  ): comments_mutation_response

  """
  update single row of the table: "comments"
  """
  update_comments_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: comments_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: comments_set_input
    pk_columns: comments_pk_columns_input!
  ): comments

  """
  update data of the table: "projects"
  """
  update_projects(
    """increments the numeric columns with given value of the filtered values"""
    _inc: projects_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: projects_set_input

    """filter the rows which have to be updated"""
    where: projects_bool_exp!
  ): projects_mutation_response

  """
  update single row of the table: "projects"
  """
  update_projects_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: projects_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: projects_set_input
    pk_columns: projects_pk_columns_input!
  ): projects

  """
  update data of the table: "status"
  """
  update_status(
    """increments the numeric columns with given value of the filtered values"""
    _inc: status_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: status_set_input

    """filter the rows which have to be updated"""
    where: status_bool_exp!
  ): status_mutation_response

  """
  update single row of the table: "status"
  """
  update_status_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: status_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: status_set_input
    pk_columns: status_pk_columns_input!
  ): status

  """
  update data of the table: "tags"
  """
  update_tags(
    """increments the numeric columns with given value of the filtered values"""
    _inc: tags_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tags_set_input

    """filter the rows which have to be updated"""
    where: tags_bool_exp!
  ): tags_mutation_response

  """
  update single row of the table: "tags"
  """
  update_tags_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: tags_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tags_set_input
    pk_columns: tags_pk_columns_input!
  ): tags

  """
  update data of the table: "task"
  """
  update_task(
    """increments the numeric columns with given value of the filtered values"""
    _inc: task_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: task_set_input

    """filter the rows which have to be updated"""
    where: task_bool_exp!
  ): task_mutation_response

  """
  update single row of the table: "task"
  """
  update_task_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: task_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: task_set_input
    pk_columns: task_pk_columns_input!
  ): task

  """
  update data of the table: "task_tags"
  """
  update_task_tags(
    """increments the numeric columns with given value of the filtered values"""
    _inc: task_tags_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: task_tags_set_input

    """filter the rows which have to be updated"""
    where: task_tags_bool_exp!
  ): task_tags_mutation_response

  """
  update single row of the table: "task_tags"
  """
  update_task_tags_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: task_tags_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: task_tags_set_input
    pk_columns: task_tags_pk_columns_input!
  ): task_tags

  """
  update data of the table: "task_type"
  """
  update_task_type(
    """increments the numeric columns with given value of the filtered values"""
    _inc: task_type_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: task_type_set_input

    """filter the rows which have to be updated"""
    where: task_type_bool_exp!
  ): task_type_mutation_response

  """
  update single row of the table: "task_type"
  """
  update_task_type_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: task_type_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: task_type_set_input
    pk_columns: task_type_pk_columns_input!
  ): task_type

  """
  update data of the table: "users"
  """
  update_users(
    """increments the numeric columns with given value of the filtered values"""
    _inc: users_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input

    """filter the rows which have to be updated"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  update single row of the table: "users"
  """
  update_users_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: users_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "projects"
"""
type projects {
  created_at: timestamptz!
  id: bigint!
  name: String!

  """An object relationship"""
  task_type: task_type
  task_type_id: Int!
  updated_at: timestamptz!
}

"""
aggregated selection of "projects"
"""
type projects_aggregate {
  aggregate: projects_aggregate_fields
  nodes: [projects!]!
}

"""
aggregate fields of "projects"
"""
type projects_aggregate_fields {
  avg: projects_avg_fields
  count(columns: [projects_select_column!], distinct: Boolean): Int!
  max: projects_max_fields
  min: projects_min_fields
  stddev: projects_stddev_fields
  stddev_pop: projects_stddev_pop_fields
  stddev_samp: projects_stddev_samp_fields
  sum: projects_sum_fields
  var_pop: projects_var_pop_fields
  var_samp: projects_var_samp_fields
  variance: projects_variance_fields
}

"""aggregate avg on columns"""
type projects_avg_fields {
  id: Float
  task_type_id: Float
}

"""
Boolean expression to filter rows from the table "projects". All fields are combined with a logical 'AND'.
"""
input projects_bool_exp {
  _and: [projects_bool_exp!]
  _not: projects_bool_exp
  _or: [projects_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: bigint_comparison_exp
  name: String_comparison_exp
  task_type: task_type_bool_exp
  task_type_id: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "projects"
"""
enum projects_constraint {
  """unique or primary key constraint"""
  projects_name_key

  """unique or primary key constraint"""
  projects_pkey
}

"""
input type for incrementing numeric columns in table "projects"
"""
input projects_inc_input {
  id: bigint
  task_type_id: Int
}

"""
input type for inserting data into table "projects"
"""
input projects_insert_input {
  created_at: timestamptz
  id: bigint
  name: String
  task_type: task_type_obj_rel_insert_input
  task_type_id: Int
  updated_at: timestamptz
}

"""aggregate max on columns"""
type projects_max_fields {
  created_at: timestamptz
  id: bigint
  name: String
  task_type_id: Int
  updated_at: timestamptz
}

"""aggregate min on columns"""
type projects_min_fields {
  created_at: timestamptz
  id: bigint
  name: String
  task_type_id: Int
  updated_at: timestamptz
}

"""
response of any mutation on the table "projects"
"""
type projects_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [projects!]!
}

"""
input type for inserting object relation for remote table "projects"
"""
input projects_obj_rel_insert_input {
  data: projects_insert_input!

  """on conflict condition"""
  on_conflict: projects_on_conflict
}

"""
on conflict condition type for table "projects"
"""
input projects_on_conflict {
  constraint: projects_constraint!
  update_columns: [projects_update_column!]! = []
  where: projects_bool_exp
}

"""Ordering options when selecting data from "projects"."""
input projects_order_by {
  created_at: order_by
  id: order_by
  name: order_by
  task_type: task_type_order_by
  task_type_id: order_by
  updated_at: order_by
}

"""primary key columns input for table: projects"""
input projects_pk_columns_input {
  id: bigint!
}

"""
select columns of table "projects"
"""
enum projects_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  task_type_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "projects"
"""
input projects_set_input {
  created_at: timestamptz
  id: bigint
  name: String
  task_type_id: Int
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type projects_stddev_fields {
  id: Float
  task_type_id: Float
}

"""aggregate stddev_pop on columns"""
type projects_stddev_pop_fields {
  id: Float
  task_type_id: Float
}

"""aggregate stddev_samp on columns"""
type projects_stddev_samp_fields {
  id: Float
  task_type_id: Float
}

"""aggregate sum on columns"""
type projects_sum_fields {
  id: bigint
  task_type_id: Int
}

"""
update columns of table "projects"
"""
enum projects_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  task_type_id

  """column name"""
  updated_at
}

"""aggregate var_pop on columns"""
type projects_var_pop_fields {
  id: Float
  task_type_id: Float
}

"""aggregate var_samp on columns"""
type projects_var_samp_fields {
  id: Float
  task_type_id: Float
}

"""aggregate variance on columns"""
type projects_variance_fields {
  id: Float
  task_type_id: Float
}

type query_root {
  """An array relationship"""
  comments(
    """distinct select on columns"""
    distinct_on: [comments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comments_order_by!]

    """filter the rows returned"""
    where: comments_bool_exp
  ): [comments!]!

  """An aggregate relationship"""
  comments_aggregate(
    """distinct select on columns"""
    distinct_on: [comments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comments_order_by!]

    """filter the rows returned"""
    where: comments_bool_exp
  ): comments_aggregate!

  """fetch data from the table: "comments" using primary key columns"""
  comments_by_pk(id: bigint!): comments

  """
  fetch data from the table: "projects"
  """
  projects(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): [projects!]!

  """
  fetch aggregated fields from the table: "projects"
  """
  projects_aggregate(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): projects_aggregate!

  """fetch data from the table: "projects" using primary key columns"""
  projects_by_pk(id: bigint!): projects

  """
  fetch data from the table: "status"
  """
  status(
    """distinct select on columns"""
    distinct_on: [status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [status_order_by!]

    """filter the rows returned"""
    where: status_bool_exp
  ): [status!]!

  """
  fetch aggregated fields from the table: "status"
  """
  status_aggregate(
    """distinct select on columns"""
    distinct_on: [status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [status_order_by!]

    """filter the rows returned"""
    where: status_bool_exp
  ): status_aggregate!

  """fetch data from the table: "status" using primary key columns"""
  status_by_pk(id: bigint!, name: String!): status

  """
  fetch data from the table: "tags"
  """
  tags(
    """distinct select on columns"""
    distinct_on: [tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tags_order_by!]

    """filter the rows returned"""
    where: tags_bool_exp
  ): [tags!]!

  """
  fetch aggregated fields from the table: "tags"
  """
  tags_aggregate(
    """distinct select on columns"""
    distinct_on: [tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tags_order_by!]

    """filter the rows returned"""
    where: tags_bool_exp
  ): tags_aggregate!

  """fetch data from the table: "tags" using primary key columns"""
  tags_by_pk(id: bigint!): tags

  """
  fetch data from the table: "task"
  """
  task(
    """distinct select on columns"""
    distinct_on: [task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_order_by!]

    """filter the rows returned"""
    where: task_bool_exp
  ): [task!]!

  """
  fetch aggregated fields from the table: "task"
  """
  task_aggregate(
    """distinct select on columns"""
    distinct_on: [task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_order_by!]

    """filter the rows returned"""
    where: task_bool_exp
  ): task_aggregate!

  """fetch data from the table: "task" using primary key columns"""
  task_by_pk(id: bigint!): task

  """An array relationship"""
  task_tags(
    """distinct select on columns"""
    distinct_on: [task_tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_tags_order_by!]

    """filter the rows returned"""
    where: task_tags_bool_exp
  ): [task_tags!]!

  """An aggregate relationship"""
  task_tags_aggregate(
    """distinct select on columns"""
    distinct_on: [task_tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_tags_order_by!]

    """filter the rows returned"""
    where: task_tags_bool_exp
  ): task_tags_aggregate!

  """fetch data from the table: "task_tags" using primary key columns"""
  task_tags_by_pk(id: bigint!): task_tags

  """
  fetch data from the table: "task_type"
  """
  task_type(
    """distinct select on columns"""
    distinct_on: [task_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_type_order_by!]

    """filter the rows returned"""
    where: task_type_bool_exp
  ): [task_type!]!

  """
  fetch aggregated fields from the table: "task_type"
  """
  task_type_aggregate(
    """distinct select on columns"""
    distinct_on: [task_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_type_order_by!]

    """filter the rows returned"""
    where: task_type_bool_exp
  ): task_type_aggregate!

  """fetch data from the table: "task_type" using primary key columns"""
  task_type_by_pk(id: bigint!, name: String!): task_type

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: bigint!, username: String!): users
}

"List of Status\n\n\ncolumns and relationships of \"status\"\n"
type status {
  color: String
  created_at: timestamptz!
  id: bigint!
  name: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "status"
"""
type status_aggregate {
  aggregate: status_aggregate_fields
  nodes: [status!]!
}

"""
aggregate fields of "status"
"""
type status_aggregate_fields {
  avg: status_avg_fields
  count(columns: [status_select_column!], distinct: Boolean): Int!
  max: status_max_fields
  min: status_min_fields
  stddev: status_stddev_fields
  stddev_pop: status_stddev_pop_fields
  stddev_samp: status_stddev_samp_fields
  sum: status_sum_fields
  var_pop: status_var_pop_fields
  var_samp: status_var_samp_fields
  variance: status_variance_fields
}

"""aggregate avg on columns"""
type status_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "status". All fields are combined with a logical 'AND'.
"""
input status_bool_exp {
  _and: [status_bool_exp!]
  _not: status_bool_exp
  _or: [status_bool_exp!]
  color: String_comparison_exp
  created_at: timestamptz_comparison_exp
  id: bigint_comparison_exp
  name: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "status"
"""
enum status_constraint {
  """unique or primary key constraint"""
  status_id_key

  """unique or primary key constraint"""
  status_pkey
}

"""
input type for incrementing numeric columns in table "status"
"""
input status_inc_input {
  id: bigint
}

"""
input type for inserting data into table "status"
"""
input status_insert_input {
  color: String
  created_at: timestamptz
  id: bigint
  name: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type status_max_fields {
  color: String
  created_at: timestamptz
  id: bigint
  name: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type status_min_fields {
  color: String
  created_at: timestamptz
  id: bigint
  name: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "status"
"""
type status_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [status!]!
}

"""
input type for inserting object relation for remote table "status"
"""
input status_obj_rel_insert_input {
  data: status_insert_input!

  """on conflict condition"""
  on_conflict: status_on_conflict
}

"""
on conflict condition type for table "status"
"""
input status_on_conflict {
  constraint: status_constraint!
  update_columns: [status_update_column!]! = []
  where: status_bool_exp
}

"""Ordering options when selecting data from "status"."""
input status_order_by {
  color: order_by
  created_at: order_by
  id: order_by
  name: order_by
  updated_at: order_by
}

"""primary key columns input for table: status"""
input status_pk_columns_input {
  id: bigint!
  name: String!
}

"""
select columns of table "status"
"""
enum status_select_column {
  """column name"""
  color

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updated_at
}

"""
input type for updating data in table "status"
"""
input status_set_input {
  color: String
  created_at: timestamptz
  id: bigint
  name: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type status_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type status_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type status_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type status_sum_fields {
  id: bigint
}

"""
update columns of table "status"
"""
enum status_update_column {
  """column name"""
  color

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updated_at
}

"""aggregate var_pop on columns"""
type status_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type status_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type status_variance_fields {
  id: Float
}

type subscription_root {
  """An array relationship"""
  comments(
    """distinct select on columns"""
    distinct_on: [comments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comments_order_by!]

    """filter the rows returned"""
    where: comments_bool_exp
  ): [comments!]!

  """An aggregate relationship"""
  comments_aggregate(
    """distinct select on columns"""
    distinct_on: [comments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comments_order_by!]

    """filter the rows returned"""
    where: comments_bool_exp
  ): comments_aggregate!

  """fetch data from the table: "comments" using primary key columns"""
  comments_by_pk(id: bigint!): comments

  """
  fetch data from the table: "projects"
  """
  projects(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): [projects!]!

  """
  fetch aggregated fields from the table: "projects"
  """
  projects_aggregate(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): projects_aggregate!

  """fetch data from the table: "projects" using primary key columns"""
  projects_by_pk(id: bigint!): projects

  """
  fetch data from the table: "status"
  """
  status(
    """distinct select on columns"""
    distinct_on: [status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [status_order_by!]

    """filter the rows returned"""
    where: status_bool_exp
  ): [status!]!

  """
  fetch aggregated fields from the table: "status"
  """
  status_aggregate(
    """distinct select on columns"""
    distinct_on: [status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [status_order_by!]

    """filter the rows returned"""
    where: status_bool_exp
  ): status_aggregate!

  """fetch data from the table: "status" using primary key columns"""
  status_by_pk(id: bigint!, name: String!): status

  """
  fetch data from the table: "tags"
  """
  tags(
    """distinct select on columns"""
    distinct_on: [tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tags_order_by!]

    """filter the rows returned"""
    where: tags_bool_exp
  ): [tags!]!

  """
  fetch aggregated fields from the table: "tags"
  """
  tags_aggregate(
    """distinct select on columns"""
    distinct_on: [tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tags_order_by!]

    """filter the rows returned"""
    where: tags_bool_exp
  ): tags_aggregate!

  """fetch data from the table: "tags" using primary key columns"""
  tags_by_pk(id: bigint!): tags

  """
  fetch data from the table: "task"
  """
  task(
    """distinct select on columns"""
    distinct_on: [task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_order_by!]

    """filter the rows returned"""
    where: task_bool_exp
  ): [task!]!

  """
  fetch aggregated fields from the table: "task"
  """
  task_aggregate(
    """distinct select on columns"""
    distinct_on: [task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_order_by!]

    """filter the rows returned"""
    where: task_bool_exp
  ): task_aggregate!

  """fetch data from the table: "task" using primary key columns"""
  task_by_pk(id: bigint!): task

  """An array relationship"""
  task_tags(
    """distinct select on columns"""
    distinct_on: [task_tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_tags_order_by!]

    """filter the rows returned"""
    where: task_tags_bool_exp
  ): [task_tags!]!

  """An aggregate relationship"""
  task_tags_aggregate(
    """distinct select on columns"""
    distinct_on: [task_tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_tags_order_by!]

    """filter the rows returned"""
    where: task_tags_bool_exp
  ): task_tags_aggregate!

  """fetch data from the table: "task_tags" using primary key columns"""
  task_tags_by_pk(id: bigint!): task_tags

  """
  fetch data from the table: "task_type"
  """
  task_type(
    """distinct select on columns"""
    distinct_on: [task_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_type_order_by!]

    """filter the rows returned"""
    where: task_type_bool_exp
  ): [task_type!]!

  """
  fetch aggregated fields from the table: "task_type"
  """
  task_type_aggregate(
    """distinct select on columns"""
    distinct_on: [task_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_type_order_by!]

    """filter the rows returned"""
    where: task_type_bool_exp
  ): task_type_aggregate!

  """fetch data from the table: "task_type" using primary key columns"""
  task_type_by_pk(id: bigint!, name: String!): task_type

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: bigint!, username: String!): users
}

"""
columns and relationships of "tags"
"""
type tags {
  color: String
  created_at: timestamptz!
  id: bigint!
  name: String!
  sort: bigint!

  """An array relationship"""
  task_tags(
    """distinct select on columns"""
    distinct_on: [task_tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_tags_order_by!]

    """filter the rows returned"""
    where: task_tags_bool_exp
  ): [task_tags!]!

  """An aggregate relationship"""
  task_tags_aggregate(
    """distinct select on columns"""
    distinct_on: [task_tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_tags_order_by!]

    """filter the rows returned"""
    where: task_tags_bool_exp
  ): task_tags_aggregate!
  updated_at: timestamptz!
}

"""
aggregated selection of "tags"
"""
type tags_aggregate {
  aggregate: tags_aggregate_fields
  nodes: [tags!]!
}

"""
aggregate fields of "tags"
"""
type tags_aggregate_fields {
  avg: tags_avg_fields
  count(columns: [tags_select_column!], distinct: Boolean): Int!
  max: tags_max_fields
  min: tags_min_fields
  stddev: tags_stddev_fields
  stddev_pop: tags_stddev_pop_fields
  stddev_samp: tags_stddev_samp_fields
  sum: tags_sum_fields
  var_pop: tags_var_pop_fields
  var_samp: tags_var_samp_fields
  variance: tags_variance_fields
}

"""aggregate avg on columns"""
type tags_avg_fields {
  id: Float
  sort: Float
}

"""
Boolean expression to filter rows from the table "tags". All fields are combined with a logical 'AND'.
"""
input tags_bool_exp {
  _and: [tags_bool_exp!]
  _not: tags_bool_exp
  _or: [tags_bool_exp!]
  color: String_comparison_exp
  created_at: timestamptz_comparison_exp
  id: bigint_comparison_exp
  name: String_comparison_exp
  sort: bigint_comparison_exp
  task_tags: task_tags_bool_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "tags"
"""
enum tags_constraint {
  """unique or primary key constraint"""
  tag_name_key

  """unique or primary key constraint"""
  tag_pkey
}

"""
input type for incrementing numeric columns in table "tags"
"""
input tags_inc_input {
  id: bigint
  sort: bigint
}

"""
input type for inserting data into table "tags"
"""
input tags_insert_input {
  color: String
  created_at: timestamptz
  id: bigint
  name: String
  sort: bigint
  task_tags: task_tags_arr_rel_insert_input
  updated_at: timestamptz
}

"""aggregate max on columns"""
type tags_max_fields {
  color: String
  created_at: timestamptz
  id: bigint
  name: String
  sort: bigint
  updated_at: timestamptz
}

"""aggregate min on columns"""
type tags_min_fields {
  color: String
  created_at: timestamptz
  id: bigint
  name: String
  sort: bigint
  updated_at: timestamptz
}

"""
response of any mutation on the table "tags"
"""
type tags_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [tags!]!
}

"""
input type for inserting object relation for remote table "tags"
"""
input tags_obj_rel_insert_input {
  data: tags_insert_input!

  """on conflict condition"""
  on_conflict: tags_on_conflict
}

"""
on conflict condition type for table "tags"
"""
input tags_on_conflict {
  constraint: tags_constraint!
  update_columns: [tags_update_column!]! = []
  where: tags_bool_exp
}

"""Ordering options when selecting data from "tags"."""
input tags_order_by {
  color: order_by
  created_at: order_by
  id: order_by
  name: order_by
  sort: order_by
  task_tags_aggregate: task_tags_aggregate_order_by
  updated_at: order_by
}

"""primary key columns input for table: tags"""
input tags_pk_columns_input {
  id: bigint!
}

"""
select columns of table "tags"
"""
enum tags_select_column {
  """column name"""
  color

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  sort

  """column name"""
  updated_at
}

"""
input type for updating data in table "tags"
"""
input tags_set_input {
  color: String
  created_at: timestamptz
  id: bigint
  name: String
  sort: bigint
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type tags_stddev_fields {
  id: Float
  sort: Float
}

"""aggregate stddev_pop on columns"""
type tags_stddev_pop_fields {
  id: Float
  sort: Float
}

"""aggregate stddev_samp on columns"""
type tags_stddev_samp_fields {
  id: Float
  sort: Float
}

"""aggregate sum on columns"""
type tags_sum_fields {
  id: bigint
  sort: bigint
}

"""
update columns of table "tags"
"""
enum tags_update_column {
  """column name"""
  color

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  sort

  """column name"""
  updated_at
}

"""aggregate var_pop on columns"""
type tags_var_pop_fields {
  id: Float
  sort: Float
}

"""aggregate var_samp on columns"""
type tags_var_samp_fields {
  id: Float
  sort: Float
}

"""aggregate variance on columns"""
type tags_variance_fields {
  id: Float
  sort: Float
}

"List of Tasks\n\n\ncolumns and relationships of \"task\"\n"
type task {
  """An array relationship"""
  comments(
    """distinct select on columns"""
    distinct_on: [comments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comments_order_by!]

    """filter the rows returned"""
    where: comments_bool_exp
  ): [comments!]!

  """An aggregate relationship"""
  comments_aggregate(
    """distinct select on columns"""
    distinct_on: [comments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comments_order_by!]

    """filter the rows returned"""
    where: comments_bool_exp
  ): comments_aggregate!
  created_at: timestamptz!
  description: String
  done_date: timestamptz
  draft_date: timestamptz
  id: bigint!
  in_progress_date: timestamptz
  name: String!

  """An object relationship"""
  project: projects
  project_id: Int

  """An object relationship"""
  status: status
  status_id: Int!

  """An array relationship"""
  task_tags(
    """distinct select on columns"""
    distinct_on: [task_tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_tags_order_by!]

    """filter the rows returned"""
    where: task_tags_bool_exp
  ): [task_tags!]!

  """An aggregate relationship"""
  task_tags_aggregate(
    """distinct select on columns"""
    distinct_on: [task_tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_tags_order_by!]

    """filter the rows returned"""
    where: task_tags_bool_exp
  ): task_tags_aggregate!

  """An object relationship"""
  task_type: task_type
  task_type_id: Int!
  updated_at: timestamptz!

  """An object relationship"""
  user: users
  user_id: Int!
}

"""
aggregated selection of "task"
"""
type task_aggregate {
  aggregate: task_aggregate_fields
  nodes: [task!]!
}

"""
aggregate fields of "task"
"""
type task_aggregate_fields {
  avg: task_avg_fields
  count(columns: [task_select_column!], distinct: Boolean): Int!
  max: task_max_fields
  min: task_min_fields
  stddev: task_stddev_fields
  stddev_pop: task_stddev_pop_fields
  stddev_samp: task_stddev_samp_fields
  sum: task_sum_fields
  var_pop: task_var_pop_fields
  var_samp: task_var_samp_fields
  variance: task_variance_fields
}

"""
order by aggregate values of table "task"
"""
input task_aggregate_order_by {
  avg: task_avg_order_by
  count: order_by
  max: task_max_order_by
  min: task_min_order_by
  stddev: task_stddev_order_by
  stddev_pop: task_stddev_pop_order_by
  stddev_samp: task_stddev_samp_order_by
  sum: task_sum_order_by
  var_pop: task_var_pop_order_by
  var_samp: task_var_samp_order_by
  variance: task_variance_order_by
}

"""
input type for inserting array relation for remote table "task"
"""
input task_arr_rel_insert_input {
  data: [task_insert_input!]!

  """on conflict condition"""
  on_conflict: task_on_conflict
}

"""aggregate avg on columns"""
type task_avg_fields {
  id: Float
  project_id: Float
  status_id: Float
  task_type_id: Float
  user_id: Float
}

"""
order by avg() on columns of table "task"
"""
input task_avg_order_by {
  id: order_by
  project_id: order_by
  status_id: order_by
  task_type_id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "task". All fields are combined with a logical 'AND'.
"""
input task_bool_exp {
  _and: [task_bool_exp!]
  _not: task_bool_exp
  _or: [task_bool_exp!]
  comments: comments_bool_exp
  created_at: timestamptz_comparison_exp
  description: String_comparison_exp
  done_date: timestamptz_comparison_exp
  draft_date: timestamptz_comparison_exp
  id: bigint_comparison_exp
  in_progress_date: timestamptz_comparison_exp
  name: String_comparison_exp
  project: projects_bool_exp
  project_id: Int_comparison_exp
  status: status_bool_exp
  status_id: Int_comparison_exp
  task_tags: task_tags_bool_exp
  task_type: task_type_bool_exp
  task_type_id: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: users_bool_exp
  user_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "task"
"""
enum task_constraint {
  """unique or primary key constraint"""
  task_pkey
}

"""
input type for incrementing numeric columns in table "task"
"""
input task_inc_input {
  id: bigint
  project_id: Int
  status_id: Int
  task_type_id: Int
  user_id: Int
}

"""
input type for inserting data into table "task"
"""
input task_insert_input {
  comments: comments_arr_rel_insert_input
  created_at: timestamptz
  description: String
  done_date: timestamptz
  draft_date: timestamptz
  id: bigint
  in_progress_date: timestamptz
  name: String
  project: projects_obj_rel_insert_input
  project_id: Int
  status: status_obj_rel_insert_input
  status_id: Int
  task_tags: task_tags_arr_rel_insert_input
  task_type: task_type_obj_rel_insert_input
  task_type_id: Int
  updated_at: timestamptz
  user: users_obj_rel_insert_input
  user_id: Int
}

"""aggregate max on columns"""
type task_max_fields {
  created_at: timestamptz
  description: String
  done_date: timestamptz
  draft_date: timestamptz
  id: bigint
  in_progress_date: timestamptz
  name: String
  project_id: Int
  status_id: Int
  task_type_id: Int
  updated_at: timestamptz
  user_id: Int
}

"""
order by max() on columns of table "task"
"""
input task_max_order_by {
  created_at: order_by
  description: order_by
  done_date: order_by
  draft_date: order_by
  id: order_by
  in_progress_date: order_by
  name: order_by
  project_id: order_by
  status_id: order_by
  task_type_id: order_by
  updated_at: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type task_min_fields {
  created_at: timestamptz
  description: String
  done_date: timestamptz
  draft_date: timestamptz
  id: bigint
  in_progress_date: timestamptz
  name: String
  project_id: Int
  status_id: Int
  task_type_id: Int
  updated_at: timestamptz
  user_id: Int
}

"""
order by min() on columns of table "task"
"""
input task_min_order_by {
  created_at: order_by
  description: order_by
  done_date: order_by
  draft_date: order_by
  id: order_by
  in_progress_date: order_by
  name: order_by
  project_id: order_by
  status_id: order_by
  task_type_id: order_by
  updated_at: order_by
  user_id: order_by
}

"""
response of any mutation on the table "task"
"""
type task_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [task!]!
}

"""
input type for inserting object relation for remote table "task"
"""
input task_obj_rel_insert_input {
  data: task_insert_input!

  """on conflict condition"""
  on_conflict: task_on_conflict
}

"""
on conflict condition type for table "task"
"""
input task_on_conflict {
  constraint: task_constraint!
  update_columns: [task_update_column!]! = []
  where: task_bool_exp
}

"""Ordering options when selecting data from "task"."""
input task_order_by {
  comments_aggregate: comments_aggregate_order_by
  created_at: order_by
  description: order_by
  done_date: order_by
  draft_date: order_by
  id: order_by
  in_progress_date: order_by
  name: order_by
  project: projects_order_by
  project_id: order_by
  status: status_order_by
  status_id: order_by
  task_tags_aggregate: task_tags_aggregate_order_by
  task_type: task_type_order_by
  task_type_id: order_by
  updated_at: order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: task"""
input task_pk_columns_input {
  id: bigint!
}

"""
select columns of table "task"
"""
enum task_select_column {
  """column name"""
  created_at

  """column name"""
  description

  """column name"""
  done_date

  """column name"""
  draft_date

  """column name"""
  id

  """column name"""
  in_progress_date

  """column name"""
  name

  """column name"""
  project_id

  """column name"""
  status_id

  """column name"""
  task_type_id

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
input type for updating data in table "task"
"""
input task_set_input {
  created_at: timestamptz
  description: String
  done_date: timestamptz
  draft_date: timestamptz
  id: bigint
  in_progress_date: timestamptz
  name: String
  project_id: Int
  status_id: Int
  task_type_id: Int
  updated_at: timestamptz
  user_id: Int
}

"""aggregate stddev on columns"""
type task_stddev_fields {
  id: Float
  project_id: Float
  status_id: Float
  task_type_id: Float
  user_id: Float
}

"""
order by stddev() on columns of table "task"
"""
input task_stddev_order_by {
  id: order_by
  project_id: order_by
  status_id: order_by
  task_type_id: order_by
  user_id: order_by
}

"""aggregate stddev_pop on columns"""
type task_stddev_pop_fields {
  id: Float
  project_id: Float
  status_id: Float
  task_type_id: Float
  user_id: Float
}

"""
order by stddev_pop() on columns of table "task"
"""
input task_stddev_pop_order_by {
  id: order_by
  project_id: order_by
  status_id: order_by
  task_type_id: order_by
  user_id: order_by
}

"""aggregate stddev_samp on columns"""
type task_stddev_samp_fields {
  id: Float
  project_id: Float
  status_id: Float
  task_type_id: Float
  user_id: Float
}

"""
order by stddev_samp() on columns of table "task"
"""
input task_stddev_samp_order_by {
  id: order_by
  project_id: order_by
  status_id: order_by
  task_type_id: order_by
  user_id: order_by
}

"""aggregate sum on columns"""
type task_sum_fields {
  id: bigint
  project_id: Int
  status_id: Int
  task_type_id: Int
  user_id: Int
}

"""
order by sum() on columns of table "task"
"""
input task_sum_order_by {
  id: order_by
  project_id: order_by
  status_id: order_by
  task_type_id: order_by
  user_id: order_by
}

"""
columns and relationships of "task_tags"
"""
type task_tags {
  created_at: timestamptz!
  id: bigint!

  """An object relationship"""
  tag: tags!
  tag_id: bigint!

  """An object relationship"""
  task: task!
  task_id: bigint!
  updated_at: timestamptz
}

"""
aggregated selection of "task_tags"
"""
type task_tags_aggregate {
  aggregate: task_tags_aggregate_fields
  nodes: [task_tags!]!
}

"""
aggregate fields of "task_tags"
"""
type task_tags_aggregate_fields {
  avg: task_tags_avg_fields
  count(columns: [task_tags_select_column!], distinct: Boolean): Int!
  max: task_tags_max_fields
  min: task_tags_min_fields
  stddev: task_tags_stddev_fields
  stddev_pop: task_tags_stddev_pop_fields
  stddev_samp: task_tags_stddev_samp_fields
  sum: task_tags_sum_fields
  var_pop: task_tags_var_pop_fields
  var_samp: task_tags_var_samp_fields
  variance: task_tags_variance_fields
}

"""
order by aggregate values of table "task_tags"
"""
input task_tags_aggregate_order_by {
  avg: task_tags_avg_order_by
  count: order_by
  max: task_tags_max_order_by
  min: task_tags_min_order_by
  stddev: task_tags_stddev_order_by
  stddev_pop: task_tags_stddev_pop_order_by
  stddev_samp: task_tags_stddev_samp_order_by
  sum: task_tags_sum_order_by
  var_pop: task_tags_var_pop_order_by
  var_samp: task_tags_var_samp_order_by
  variance: task_tags_variance_order_by
}

"""
input type for inserting array relation for remote table "task_tags"
"""
input task_tags_arr_rel_insert_input {
  data: [task_tags_insert_input!]!

  """on conflict condition"""
  on_conflict: task_tags_on_conflict
}

"""aggregate avg on columns"""
type task_tags_avg_fields {
  id: Float
  tag_id: Float
  task_id: Float
}

"""
order by avg() on columns of table "task_tags"
"""
input task_tags_avg_order_by {
  id: order_by
  tag_id: order_by
  task_id: order_by
}

"""
Boolean expression to filter rows from the table "task_tags". All fields are combined with a logical 'AND'.
"""
input task_tags_bool_exp {
  _and: [task_tags_bool_exp!]
  _not: task_tags_bool_exp
  _or: [task_tags_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: bigint_comparison_exp
  tag: tags_bool_exp
  tag_id: bigint_comparison_exp
  task: task_bool_exp
  task_id: bigint_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "task_tags"
"""
enum task_tags_constraint {
  """unique or primary key constraint"""
  task_tag_pkey
}

"""
input type for incrementing numeric columns in table "task_tags"
"""
input task_tags_inc_input {
  id: bigint
  tag_id: bigint
  task_id: bigint
}

"""
input type for inserting data into table "task_tags"
"""
input task_tags_insert_input {
  created_at: timestamptz
  id: bigint
  tag: tags_obj_rel_insert_input
  tag_id: bigint
  task: task_obj_rel_insert_input
  task_id: bigint
  updated_at: timestamptz
}

"""aggregate max on columns"""
type task_tags_max_fields {
  created_at: timestamptz
  id: bigint
  tag_id: bigint
  task_id: bigint
  updated_at: timestamptz
}

"""
order by max() on columns of table "task_tags"
"""
input task_tags_max_order_by {
  created_at: order_by
  id: order_by
  tag_id: order_by
  task_id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type task_tags_min_fields {
  created_at: timestamptz
  id: bigint
  tag_id: bigint
  task_id: bigint
  updated_at: timestamptz
}

"""
order by min() on columns of table "task_tags"
"""
input task_tags_min_order_by {
  created_at: order_by
  id: order_by
  tag_id: order_by
  task_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "task_tags"
"""
type task_tags_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [task_tags!]!
}

"""
on conflict condition type for table "task_tags"
"""
input task_tags_on_conflict {
  constraint: task_tags_constraint!
  update_columns: [task_tags_update_column!]! = []
  where: task_tags_bool_exp
}

"""Ordering options when selecting data from "task_tags"."""
input task_tags_order_by {
  created_at: order_by
  id: order_by
  tag: tags_order_by
  tag_id: order_by
  task: task_order_by
  task_id: order_by
  updated_at: order_by
}

"""primary key columns input for table: task_tags"""
input task_tags_pk_columns_input {
  id: bigint!
}

"""
select columns of table "task_tags"
"""
enum task_tags_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  tag_id

  """column name"""
  task_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "task_tags"
"""
input task_tags_set_input {
  created_at: timestamptz
  id: bigint
  tag_id: bigint
  task_id: bigint
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type task_tags_stddev_fields {
  id: Float
  tag_id: Float
  task_id: Float
}

"""
order by stddev() on columns of table "task_tags"
"""
input task_tags_stddev_order_by {
  id: order_by
  tag_id: order_by
  task_id: order_by
}

"""aggregate stddev_pop on columns"""
type task_tags_stddev_pop_fields {
  id: Float
  tag_id: Float
  task_id: Float
}

"""
order by stddev_pop() on columns of table "task_tags"
"""
input task_tags_stddev_pop_order_by {
  id: order_by
  tag_id: order_by
  task_id: order_by
}

"""aggregate stddev_samp on columns"""
type task_tags_stddev_samp_fields {
  id: Float
  tag_id: Float
  task_id: Float
}

"""
order by stddev_samp() on columns of table "task_tags"
"""
input task_tags_stddev_samp_order_by {
  id: order_by
  tag_id: order_by
  task_id: order_by
}

"""aggregate sum on columns"""
type task_tags_sum_fields {
  id: bigint
  tag_id: bigint
  task_id: bigint
}

"""
order by sum() on columns of table "task_tags"
"""
input task_tags_sum_order_by {
  id: order_by
  tag_id: order_by
  task_id: order_by
}

"""
update columns of table "task_tags"
"""
enum task_tags_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  tag_id

  """column name"""
  task_id

  """column name"""
  updated_at
}

"""aggregate var_pop on columns"""
type task_tags_var_pop_fields {
  id: Float
  tag_id: Float
  task_id: Float
}

"""
order by var_pop() on columns of table "task_tags"
"""
input task_tags_var_pop_order_by {
  id: order_by
  tag_id: order_by
  task_id: order_by
}

"""aggregate var_samp on columns"""
type task_tags_var_samp_fields {
  id: Float
  tag_id: Float
  task_id: Float
}

"""
order by var_samp() on columns of table "task_tags"
"""
input task_tags_var_samp_order_by {
  id: order_by
  tag_id: order_by
  task_id: order_by
}

"""aggregate variance on columns"""
type task_tags_variance_fields {
  id: Float
  tag_id: Float
  task_id: Float
}

"""
order by variance() on columns of table "task_tags"
"""
input task_tags_variance_order_by {
  id: order_by
  tag_id: order_by
  task_id: order_by
}

"List of Task Types\n\n\ncolumns and relationships of \"task_type\"\n"
type task_type {
  created_at: timestamptz!
  id: bigint!
  name: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "task_type"
"""
type task_type_aggregate {
  aggregate: task_type_aggregate_fields
  nodes: [task_type!]!
}

"""
aggregate fields of "task_type"
"""
type task_type_aggregate_fields {
  avg: task_type_avg_fields
  count(columns: [task_type_select_column!], distinct: Boolean): Int!
  max: task_type_max_fields
  min: task_type_min_fields
  stddev: task_type_stddev_fields
  stddev_pop: task_type_stddev_pop_fields
  stddev_samp: task_type_stddev_samp_fields
  sum: task_type_sum_fields
  var_pop: task_type_var_pop_fields
  var_samp: task_type_var_samp_fields
  variance: task_type_variance_fields
}

"""aggregate avg on columns"""
type task_type_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "task_type". All fields are combined with a logical 'AND'.
"""
input task_type_bool_exp {
  _and: [task_type_bool_exp!]
  _not: task_type_bool_exp
  _or: [task_type_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: bigint_comparison_exp
  name: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "task_type"
"""
enum task_type_constraint {
  """unique or primary key constraint"""
  task_type_id_key

  """unique or primary key constraint"""
  task_type_name_key

  """unique or primary key constraint"""
  task_type_pkey
}

"""
input type for incrementing numeric columns in table "task_type"
"""
input task_type_inc_input {
  id: bigint
}

"""
input type for inserting data into table "task_type"
"""
input task_type_insert_input {
  created_at: timestamptz
  id: bigint
  name: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type task_type_max_fields {
  created_at: timestamptz
  id: bigint
  name: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type task_type_min_fields {
  created_at: timestamptz
  id: bigint
  name: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "task_type"
"""
type task_type_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [task_type!]!
}

"""
input type for inserting object relation for remote table "task_type"
"""
input task_type_obj_rel_insert_input {
  data: task_type_insert_input!

  """on conflict condition"""
  on_conflict: task_type_on_conflict
}

"""
on conflict condition type for table "task_type"
"""
input task_type_on_conflict {
  constraint: task_type_constraint!
  update_columns: [task_type_update_column!]! = []
  where: task_type_bool_exp
}

"""Ordering options when selecting data from "task_type"."""
input task_type_order_by {
  created_at: order_by
  id: order_by
  name: order_by
  updated_at: order_by
}

"""primary key columns input for table: task_type"""
input task_type_pk_columns_input {
  id: bigint!
  name: String!
}

"""
select columns of table "task_type"
"""
enum task_type_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updated_at
}

"""
input type for updating data in table "task_type"
"""
input task_type_set_input {
  created_at: timestamptz
  id: bigint
  name: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type task_type_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type task_type_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type task_type_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type task_type_sum_fields {
  id: bigint
}

"""
update columns of table "task_type"
"""
enum task_type_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updated_at
}

"""aggregate var_pop on columns"""
type task_type_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type task_type_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type task_type_variance_fields {
  id: Float
}

"""
update columns of table "task"
"""
enum task_update_column {
  """column name"""
  created_at

  """column name"""
  description

  """column name"""
  done_date

  """column name"""
  draft_date

  """column name"""
  id

  """column name"""
  in_progress_date

  """column name"""
  name

  """column name"""
  project_id

  """column name"""
  status_id

  """column name"""
  task_type_id

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""aggregate var_pop on columns"""
type task_var_pop_fields {
  id: Float
  project_id: Float
  status_id: Float
  task_type_id: Float
  user_id: Float
}

"""
order by var_pop() on columns of table "task"
"""
input task_var_pop_order_by {
  id: order_by
  project_id: order_by
  status_id: order_by
  task_type_id: order_by
  user_id: order_by
}

"""aggregate var_samp on columns"""
type task_var_samp_fields {
  id: Float
  project_id: Float
  status_id: Float
  task_type_id: Float
  user_id: Float
}

"""
order by var_samp() on columns of table "task"
"""
input task_var_samp_order_by {
  id: order_by
  project_id: order_by
  status_id: order_by
  task_type_id: order_by
  user_id: order_by
}

"""aggregate variance on columns"""
type task_variance_fields {
  id: Float
  project_id: Float
  status_id: Float
  task_type_id: Float
  user_id: Float
}

"""
order by variance() on columns of table "task"
"""
input task_variance_order_by {
  id: order_by
  project_id: order_by
  status_id: order_by
  task_type_id: order_by
  user_id: order_by
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"List of Users\n\n\ncolumns and relationships of \"users\"\n"
type users {
  created_at: timestamptz!
  first_name: String!
  id: bigint!
  last_name: String!
  middle_name: String
  name: String!
  role: String
  suffix_name: String

  """An array relationship"""
  task_ids(
    """distinct select on columns"""
    distinct_on: [task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_order_by!]

    """filter the rows returned"""
    where: task_bool_exp
  ): [task!]!

  """An aggregate relationship"""
  task_ids_aggregate(
    """distinct select on columns"""
    distinct_on: [task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_order_by!]

    """filter the rows returned"""
    where: task_bool_exp
  ): task_aggregate!
  updated_at: timestamptz!
  username: String!
}

"""
aggregated selection of "users"
"""
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

"""
aggregate fields of "users"
"""
type users_aggregate_fields {
  avg: users_avg_fields
  count(columns: [users_select_column!], distinct: Boolean): Int!
  max: users_max_fields
  min: users_min_fields
  stddev: users_stddev_fields
  stddev_pop: users_stddev_pop_fields
  stddev_samp: users_stddev_samp_fields
  sum: users_sum_fields
  var_pop: users_var_pop_fields
  var_samp: users_var_samp_fields
  variance: users_variance_fields
}

"""aggregate avg on columns"""
type users_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  created_at: timestamptz_comparison_exp
  first_name: String_comparison_exp
  id: bigint_comparison_exp
  last_name: String_comparison_exp
  middle_name: String_comparison_exp
  name: String_comparison_exp
  role: String_comparison_exp
  suffix_name: String_comparison_exp
  task_ids: task_bool_exp
  updated_at: timestamptz_comparison_exp
  username: String_comparison_exp
}

"""
unique or primary key constraints on table "users"
"""
enum users_constraint {
  """unique or primary key constraint"""
  user_id_key

  """unique or primary key constraint"""
  user_pkey
}

"""
input type for incrementing numeric columns in table "users"
"""
input users_inc_input {
  id: bigint
}

"""
input type for inserting data into table "users"
"""
input users_insert_input {
  created_at: timestamptz
  first_name: String
  id: bigint
  last_name: String
  middle_name: String
  name: String
  role: String
  suffix_name: String
  task_ids: task_arr_rel_insert_input
  updated_at: timestamptz
  username: String
}

"""aggregate max on columns"""
type users_max_fields {
  created_at: timestamptz
  first_name: String
  id: bigint
  last_name: String
  middle_name: String
  name: String
  role: String
  suffix_name: String
  updated_at: timestamptz
  username: String
}

"""aggregate min on columns"""
type users_min_fields {
  created_at: timestamptz
  first_name: String
  id: bigint
  last_name: String
  middle_name: String
  name: String
  role: String
  suffix_name: String
  updated_at: timestamptz
  username: String
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [users!]!
}

"""
input type for inserting object relation for remote table "users"
"""
input users_obj_rel_insert_input {
  data: users_insert_input!

  """on conflict condition"""
  on_conflict: users_on_conflict
}

"""
on conflict condition type for table "users"
"""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]! = []
  where: users_bool_exp
}

"""Ordering options when selecting data from "users"."""
input users_order_by {
  created_at: order_by
  first_name: order_by
  id: order_by
  last_name: order_by
  middle_name: order_by
  name: order_by
  role: order_by
  suffix_name: order_by
  task_ids_aggregate: task_aggregate_order_by
  updated_at: order_by
  username: order_by
}

"""primary key columns input for table: users"""
input users_pk_columns_input {
  id: bigint!
  username: String!
}

"""
select columns of table "users"
"""
enum users_select_column {
  """column name"""
  created_at

  """column name"""
  first_name

  """column name"""
  id

  """column name"""
  last_name

  """column name"""
  middle_name

  """column name"""
  name

  """column name"""
  role

  """column name"""
  suffix_name

  """column name"""
  updated_at

  """column name"""
  username
}

"""
input type for updating data in table "users"
"""
input users_set_input {
  created_at: timestamptz
  first_name: String
  id: bigint
  last_name: String
  middle_name: String
  name: String
  role: String
  suffix_name: String
  updated_at: timestamptz
  username: String
}

"""aggregate stddev on columns"""
type users_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type users_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type users_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type users_sum_fields {
  id: bigint
}

"""
update columns of table "users"
"""
enum users_update_column {
  """column name"""
  created_at

  """column name"""
  first_name

  """column name"""
  id

  """column name"""
  last_name

  """column name"""
  middle_name

  """column name"""
  name

  """column name"""
  role

  """column name"""
  suffix_name

  """column name"""
  updated_at

  """column name"""
  username
}

"""aggregate var_pop on columns"""
type users_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type users_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type users_variance_fields {
  id: Float
}